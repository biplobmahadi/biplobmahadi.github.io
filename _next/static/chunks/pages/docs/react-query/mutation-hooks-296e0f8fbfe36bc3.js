(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[789],{8868:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react-query/mutation-hooks",function(){return n(4592)}])},1385:function(e,t,n){"use strict";var i=n(5893),s=n(7870);t.Z=function(e){var t=e.theme;return(0,i.jsx)(s.Z,{id:"comments",repo:"biplobmahadi/biplobmahadi.github.io",repoId:"R_kgDOHkgVOA",category:"Comments",categoryId:"DIC_kwDOHkgVOM4CQGH7",mapping:"title",term:"Welcome!",reactionsEnabled:"1",emitMetadata:"0",inputPosition:"top",theme:t,lang:"en",loading:"lazy"})}},1580:function(e,t,n){"use strict";var i=n(5893),s=n(3857),o=n(6955);t.Z=function(e){var t=e.code,n=e.language,r=(0,s.rZ)().colorScheme;return(0,i.jsx)(o.p1,{sx:{margin:"1% 0",border:"1px gray solid",borderRadius:"6px"},language:n,withLineNumbers:!0,colorScheme:"dark"===r?"dark":"light",children:t})}},4592:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var i=n(5893),s=n(9008),o=n.n(s),r=n(7294),a=n(3857),u=n(112),c=n(1580),l=n(1385),p=function(){var e=(0,a.rZ)().colorScheme;return(0,i.jsxs)(r.Fragment,{children:[(0,i.jsx)(o(),{children:(0,i.jsx)("title",{children:"Mutation Hooks - React Query"})}),(0,i.jsxs)("div",{style:{margin:"2% 1%"},children:[(0,i.jsx)(u.x,{size:"xl",weight:700,mb:30,align:"center",children:"Create Custom Mutation Hooks"}),(0,i.jsx)("section",{children:(0,i.jsx)(u.x,{size:"xs",color:"dimmed",children:"Published: Jul 28, 2022 | Last Modified: Jul 31, 2022"})}),(0,i.jsxs)(u.x,{size:"sm",my:20,children:["Here we will create 4 different custom hooks using the useMutation hook to handle ",(0,i.jsx)("b",{children:"POST, PUT, PATCH and DELETE"})," requests."]}),(0,i.jsx)(u.x,{size:"sm",children:"Create some interfaces in interfaces/mutationConfig.ts which will be used to create our mutation hooks."}),(0,i.jsx)(c.Z,{code:"export interface IPostMutationConfig {\n  path: string;\n  enableAbort?: boolean;\n  isPrivate?: boolean;\n}\n\nexport interface IPutPatchDelMutationConfig {\n  pathFn(id: number): string;\n  enableAbort?: boolean;\n  isPrivate?: boolean;\n}",language:"typescript"}),(0,i.jsx)(u.x,{id:"postMutation",size:"sm",mb:10,mt:30,weight:700,children:"Create Post Mutation"}),(0,i.jsxs)(u.x,{size:"sm",children:["To handle ",(0,i.jsx)("b",{children:"POST"})," request, create ",(0,i.jsx)("b",{children:"hooks/usePostMutation.ts"})]}),(0,i.jsx)(c.Z,{code:'import { AxiosError } from "axios";\nimport { useMutation, UseMutationOptions } from "react-query";\nimport { IPostMutationConfig } from "./interfaces/mutationConfig";\nimport { usePrivateAxios, usePublicAxios } from "../../axios";\n\nexport const usePostMutation = <TResponse, TVariables>(\n  config: IPostMutationConfig,\n  options?: Omit<\n    UseMutationOptions<TResponse, AxiosError, TVariables>,\n    "mutationFn"\n  >\n) => {\n  const { path, enableAbort = true, isPrivate = true } = config;\n  const { publicPost } = usePublicAxios();\n  const { privatePost } = usePrivateAxios();\n\n  const mutationFn = (variables: TVariables) => {\n    if (isPrivate) {\n      return privatePost<TResponse, TVariables>(path, variables, { activateAbort: enableAbort });\n    }\n    return publicPost<TResponse, TVariables>(path, variables, { activateAbort: enableAbort });\n  };\n\n  return useMutation<TResponse, AxiosError, TVariables>(mutationFn, options);\n};\n',language:"typescript"}),(0,i.jsx)(u.x,{id:"putMutation",size:"sm",mt:30,mb:10,weight:700,children:"Create Put Mutation"}),(0,i.jsxs)(u.x,{size:"sm",children:["To handle ",(0,i.jsx)("b",{children:"PUT"})," request, create ",(0,i.jsx)("b",{children:"hooks/usePutMutation.ts"})]}),(0,i.jsxs)(u.x,{size:"sm",mt:10,children:["We must pass id to handle ",(0,i.jsx)("b",{children:"PUT"})," requests. So we will create this hook with this concern."]}),(0,i.jsx)(c.Z,{code:'import { AxiosError } from "axios";\nimport { useMutation, UseMutationOptions } from "react-query";\nimport { IPutPatchDelMutationConfig } from "./interfaces/reactQuery";\nimport { usePrivateAxios, usePublicAxios } from "../../axios";\n\nexport const usePutMutation = <TResponse, TVariables extends { id: number }>(\n  config: IPutPatchDelMutationConfig,\n  options?: Omit<\n    UseMutationOptions<TResponse, AxiosError, TVariables>,\n    "mutationFn"\n  >\n) => {\n  const { pathFn, enableAbort = true, isPrivate = true } = config;\n  const { publicPut } = usePublicAxios();\n  const { privatePut } = usePrivateAxios();\n\n  const mutationFn = ({ id, ...rest }: TVariables) => {\n    if (isPrivate) {\n      return privatePut<TResponse, Omit<TVariables, "id">>(pathFn(id), rest, { activateAbort: enableAbort });\n    }\n    return publicPut<TResponse, Omit<TVariables, "id">>(pathFn(id), rest, { activateAbort: enableAbort });\n  };\n\n  return useMutation<TResponse, AxiosError, TVariables>(mutationFn, options);\n};',language:"typescript"}),(0,i.jsx)(u.x,{id:"patchMutation",size:"sm",mt:30,mb:10,weight:700,children:"Create Patch Mutation"}),(0,i.jsxs)(u.x,{size:"sm",children:["To handle ",(0,i.jsx)("b",{children:"PATCH"})," request, create"," ",(0,i.jsx)("b",{children:"hooks/usePatchMutation.ts"})]}),(0,i.jsxs)(u.x,{size:"sm",mt:10,children:["We must pass id to handle ",(0,i.jsx)("b",{children:"PATCH"})," requests. So we will create this hook with this concern."]}),(0,i.jsx)(c.Z,{code:'import { AxiosError } from "axios";\nimport { useMutation, UseMutationOptions } from "react-query";\nimport { IPutPatchDelMutationConfig } from "./interfaces/reactQuery";\nimport { usePrivateAxios, usePublicAxios } from "../../axios";\n\nexport const usePatchMutation = <TResponse, TVariables extends { id: number }>(\n  config: IPutPatchDelMutationConfig,\n  options?: Omit<\n    UseMutationOptions<TResponse, AxiosError, TVariables>,\n    "mutationFn"\n  >\n) => {\n  const { pathFn, enableAbort = true, isPrivate = true } = config;\n  const { publicPatch } = usePublicAxios();\n  const { privatePatch } = usePrivateAxios();\n\n  const mutationFn = ({ id, ...rest }: TVariables) => {\n    if (isPrivate) {\n      return privatePatch<TResponse, Omit<TVariables, "id">>(pathFn(id), rest, { activateAbort: enableAbort });\n    }\n    return publicPatch<TResponse, Omit<TVariables, "id">>(pathFn(id), rest, { activateAbort: enableAbort });\n  };\n\n  return useMutation<TResponse, AxiosError, TVariables>(mutationFn, options);\n};',language:"typescript"}),(0,i.jsx)(u.x,{id:"deleteMutation",size:"sm",mt:30,mb:10,weight:700,children:"Create Delete Mutation"}),(0,i.jsxs)(u.x,{size:"sm",children:["To handle ",(0,i.jsx)("b",{children:"DELETE"})," request, create"," ",(0,i.jsx)("b",{children:"hooks/useDeleteMutation.ts"})]}),(0,i.jsxs)(u.x,{size:"sm",mt:10,children:["We must pass id to handle ",(0,i.jsx)("b",{children:"DELETE"})," requests. So we will create this hook with this concern."]}),(0,i.jsx)(c.Z,{code:'import { AxiosError } from "axios";\nimport { useMutation, UseMutationOptions } from "react-query";\nimport { IPutDelMutationConfig } from "./interfaces/reactQuery";\nimport { usePrivateAxios, usePublicAxios } from "../../axios";\n\nexport const useDeleteMutation = <TResponse, TVariables extends { id: number }>(\n  config: IPutDelMutationConfig,\n  options?: Omit<\n    UseMutationOptions<TResponse, AxiosError, TVariables>,\n    "mutationFn"\n  >\n) => {\n  const { pathFn, enableAbort = true, isPrivate = true } = config;\n  const { publicDelete } = usePublicAxios();\n  const { privateDelete } = usePrivateAxios();\n\n  const mutationFn = ({ id }: TVariables) => {\n    if (isPrivate) {\n      return privateDelete<TResponse>(pathFn(id), { activateAbort: enableAbort });\n    }\n    return publicDelete<TResponse>(pathFn(id), { activateAbort: enableAbort });\n  };\n\n  return useMutation<TResponse, AxiosError, TVariables>(mutationFn, options);\n};',language:"typescript"}),(0,i.jsxs)(u.x,{size:"sm",mt:20,children:["Finally, we will move all React Query related folders to the"," ",(0,i.jsx)("b",{children:"libs/reactQuery"})," folder."]}),(0,i.jsx)("div",{style:{marginTop:"20px"},children:(0,i.jsx)(l.Z,{theme:"dark"===e?"dark":"light"})})]})]})}}},function(e){e.O(0,[298,774,888,179],(function(){return t=8868,e(e.s=t);var t}));var t=e.O();_N_E=t}]);