(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[961],{4880:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/axios/promise-handling-and-aborting",function(){return t(9566)}])},1385:function(e,n,t){"use strict";var r=t(5893),s=t(7870);n.Z=function(e){var n=e.theme;return(0,r.jsx)(s.Z,{id:"comments",repo:"biplobmahadi/biplobmahadi.github.io",repoId:"R_kgDOHkgVOA",category:"Comments",categoryId:"DIC_kwDOHkgVOM4CQGH7",mapping:"title",term:"Welcome!",reactionsEnabled:"1",emitMetadata:"0",inputPosition:"top",theme:n,lang:"en",loading:"lazy"})}},1580:function(e,n,t){"use strict";var r=t(5893),s=t(3857),i=t(6955);n.Z=function(e){var n=e.code,t=e.language,o=(0,s.rZ)().colorScheme;return(0,r.jsx)(i.p1,{sx:{margin:"1% 0",border:"1px gray solid",borderRadius:"6px"},language:t,withLineNumbers:!0,colorScheme:"dark"===o?"dark":"light",children:n})}},9566:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var r=t(5893),s=t(9008),i=t.n(s),o=t(7294),a=t(3857),c=t(112),l=t(1580),d=t(1385),u=function(){var e=(0,a.rZ)().colorScheme;return(0,r.jsxs)(o.Fragment,{children:[(0,r.jsx)(i(),{children:(0,r.jsx)("title",{children:"Promise Handling & Aborting - Axios for React"})}),(0,r.jsxs)("div",{style:{margin:"2% 1%"},children:[(0,r.jsx)(c.x,{size:"xl",weight:700,mb:30,align:"center",children:"Promise Handling & Aborting"}),(0,r.jsx)("section",{children:(0,r.jsx)(c.x,{size:"xs",color:"dimmed",children:"Published: Jul 16, 2022 | Last Modified: Jul 16, 2022"})}),(0,r.jsx)(c.x,{size:"sm",my:20,children:"We know axios is a promise based library. We always need to handle those promises in every request. Here we will create a system to reuse this every time."}),(0,r.jsxs)(c.x,{size:"sm",mb:20,children:["Here we are using 2 instances. Now we need to create all requests"," ",(0,r.jsx)("b",{children:"(GET, POST, PUT, PATCH, DELETE)"})," which both instances can use and here the promises need to be handled."]}),(0,r.jsxs)(c.x,{size:"sm",mb:20,children:["We can see, for every request ",(0,r.jsx)("b",{children:"(GET, POST, PUT, PATCH, DELETE)"})," ","we need to handle promises. So we can create one request function and use it for every request. And in that one request we can handle promises. It will also be great for adding abort or cancellation in only one place and every request will use this abort or cancellation."]}),(0,r.jsx)(c.x,{id:"promiseHandling",weight:700,mb:10,children:"Promise handling"}),(0,r.jsxs)(c.x,{size:"sm",children:["Create ",(0,r.jsx)("b",{children:"helpers/request.ts"})]}),(0,r.jsx)(l.Z,{code:'import { AxiosError, AxiosInstance, AxiosRequestConfig } from "axios";\n\nconst request = async <R, D = any>(\n  instance: AxiosInstance,\n  method: "get" | "post" | "put" | "patch" | "delete",\n  url: string,\n  config?: AxiosRequestConfig,\n  data?: D\n): Promise<R | undefined> => {\n  try {\n    const response = await instance({\n      method: method,\n      url: url,\n      data: data,\n      ...config,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(error as AxiosError);\n  }\n};\n\nexport default request;',language:"typescript"}),(0,r.jsx)(c.x,{id:"aborting",weight:700,mb:10,mt:30,children:"Aborting"}),(0,r.jsx)(c.x,{size:"sm",mb:20,children:"We need to know why we use abort or cancellation. This is to cancel any request for optimization."}),(0,r.jsx)(c.x,{size:"sm",mb:20,children:"Why do we need to cancel any request?"}),(0,r.jsx)(c.x,{size:"sm",mb:20,children:"Suppose we are creating a search component. When a user types anything on search input we will show the specific result with that onchange event. If someone types frequently, we don\u2019t need an api call every time, we can optimize it when users stop typing frequently."}),(0,r.jsx)(c.x,{size:"sm",mb:20,children:"Abort or cancellation in axios means, if a request is not resolved or rejected and again that same request occurs then the previous one will cancel and the latest request will resolve or reject."}),(0,r.jsxs)(c.x,{size:"sm",children:["Adding abort functionality with ",(0,r.jsx)("b",{children:"helpers/request.ts"})]}),(0,r.jsx)(l.Z,{code:'import { AxiosError, AxiosInstance, AxiosRequestConfig } from "axios";\nimport { IAbortOption } from "../interfaces/abortOption";\n\nlet controller: AbortController;\n\nconst request = async <R, D = any>(\n  instance: AxiosInstance,\n  method: "get" | "post" | "put" | "patch" | "delete",\n  url: string,\n  abortOption: IAbortOption = {\n    activateAbort: true,\n  },\n  config?: AxiosRequestConfig,\n  data?: D\n): Promise<R | undefined> => {\n  try {\n    if (abortOption.activateAbort && controller) controller.abort();\n    controller = new AbortController();\n\n    const response = await instance({\n      method: method,\n      url: url,\n      data: data,\n      signal: controller.signal,\n      ...config,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(error as AxiosError);\n  }\n};\n\nexport default request;',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["For interface, create ",(0,r.jsx)("b",{children:"interfaces/abortOption.ts"})]}),(0,r.jsx)(l.Z,{code:"export interface IAbortOption {\n  activateAbort: boolean;\n}",language:"typescript"}),(0,r.jsx)(c.x,{id:"necessaryRequests",weight:700,mb:10,mt:30,children:"Necessary requests"}),(0,r.jsxs)(c.x,{size:"sm",mb:20,children:["We have 2 instances and we want to create all requests"," ",(0,r.jsx)("b",{children:"(GET, POST, PUT, PATCH, DELETE)"})," which both instances can use."]}),(0,r.jsxs)(c.x,{size:"sm",children:["Create ",(0,r.jsx)("b",{children:"helpers/axiosRequests.ts"})]}),(0,r.jsx)(l.Z,{code:'import { AxiosInstance, AxiosRequestConfig } from "axios";\nimport { IAbortOption } from "../interfaces/abortOption";\nimport request from "./request";\n\nconst axiosRequests = (instance: AxiosInstance) => {\n  return {\n    getRequest: <R>(\n      url: string,\n      abortOption?: IAbortOption,\n      config?: AxiosRequestConfig\n    ): Promise<R | undefined> =>\n      request<R>(instance, "get", url, abortOption, config),\n    postRequest: <R, D>(\n      url: string,\n      data?: D,\n      abortOption?: IAbortOption,\n      config?: AxiosRequestConfig\n    ): Promise<R | undefined> =>\n      request<R, D>(instance, "post", url, abortOption, config, data),\n    putRequest: <R, D>(\n      url: string,\n      data?: D,\n      abortOption?: IAbortOption,\n      config?: AxiosRequestConfig\n    ): Promise<R | undefined> =>\n      request<R, D>(instance, "put", url, abortOption, config, data),\n    patchRequest: <R, D>(\n      url: string,\n      data?: D,\n      abortOption?: IAbortOption,\n      config?: AxiosRequestConfig\n    ): Promise<R | undefined> =>\n      request<R, D>(instance, "patch", url, abortOption, config, data),\n    deleteRequest: <R>(\n      url: string,\n      abortOption?: IAbortOption,\n      config?: AxiosRequestConfig\n    ): Promise<R | undefined> =>\n      request<R>(instance, "delete", url, abortOption, config),\n  };\n};\n\nexport default axiosRequests;',language:"typescript"}),(0,r.jsx)("div",{style:{marginTop:"20px"},children:(0,r.jsx)(d.Z,{theme:"dark"===e?"dark":"light"})})]})]})}}},function(e){e.O(0,[298,774,888,179],(function(){return n=4880,e(e.s=n);var n}));var n=e.O();_N_E=n}]);