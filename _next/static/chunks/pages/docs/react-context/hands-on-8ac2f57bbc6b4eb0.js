(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[321],{2880:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/react-context/hands-on",function(){return n(289)}])},9030:function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=(0,n(8067).k)((function(e){var t;return{containerClass:(t={margin:"2% 15% 2% 10%"},r(t,e.fn.smallerThan("md"),{margin:"2%"}),r(t,e.fn.smallerThan("sm"),{margin:"1%"}),t)}}));t.Z=o},1385:function(e,t,n){"use strict";var r=n(5893),o=n(7870);t.Z=function(e){var t=e.theme;return(0,r.jsx)(o.Z,{id:"comments",repo:"biplobmahadi/biplobmahadi.github.io",repoId:"R_kgDOHkgVOA",category:"Comments",categoryId:"DIC_kwDOHkgVOM4CQGH7",mapping:"title",term:"Welcome!",reactionsEnabled:"1",emitMetadata:"0",inputPosition:"top",theme:t,lang:"en",loading:"lazy"})}},1580:function(e,t,n){"use strict";var r=n(5893),o=n(3857),c=n(6955);t.Z=function(e){var t=e.code,n=e.language,s=(0,o.rZ)().colorScheme;return(0,r.jsx)(c.p1,{sx:{margin:"1% 0",border:"1px gray solid",borderRadius:"6px"},language:n,withLineNumbers:!0,colorScheme:"dark"===s?"dark":"light",children:t})}},289:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return l}});var r=n(5893),o=n(3857),c=n(112),s=n(9008),i=n.n(s),a=n(7294),u=n(9030),x=n(1385),d=n(1580),l=function(){var e=(0,o.rZ)().colorScheme,t=(0,u.Z)().classes;return(0,r.jsxs)(a.Fragment,{children:[(0,r.jsx)(i(),{children:(0,r.jsx)("title",{children:"Hands On - React Context"})}),(0,r.jsxs)("div",{className:t.containerClass,children:[(0,r.jsx)(c.x,{size:"xl",weight:700,mb:30,align:"center",children:"React Context Hands-On"}),(0,r.jsx)("section",{children:(0,r.jsx)(c.x,{size:"xs",color:"dimmed",children:"Published: Jul 30, 2022 | Last Modified: Jul 30, 2022"})}),(0,r.jsx)(c.x,{size:"sm",my:20,children:"We will create a counter context and wrap our app with this context provider. Then we will create a component and consume our counter context state on it. Obviously we will manage the context state by using the useReducer hook."}),(0,r.jsxs)(c.x,{size:"sm",children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/initialState.ts"})]}),(0,r.jsx)(d.Z,{code:'import { ICounterContextState } from "../../interfaces/contexts/counter";\n\nconst initialState: ICounterContextState = {\n  count: 0,\n};\n\nexport default initialState;',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/actions.ts"})]}),(0,r.jsx)(d.Z,{code:'export const INCREMENT = "INCREMENT";\nexport const DECREMENT = "DECREMENT";\nexport const RESET = "RESET";',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/reducer.ts"})]}),(0,r.jsx)(d.Z,{code:'import {\n  ICounterContextState,\n  ICounterContextAction,\n} from "../../interfaces/contexts/counter";\nimport { DECREMENT, INCREMENT, RESET } from "./actions";\n  \nexport default function counterReducer(\n  state: ICounterContextState,\n  action: ICounterContextAction\n): ICounterContextState {\n  const { count } = state;\n  const { type, payload } = action;\n\n  switch (type) {\n    case INCREMENT:\n      return {\n        count: count + payload,\n      };\n    case DECREMENT:\n      return {\n        count: count - payload,\n      };\n    case RESET:\n      return {\n        count: 0,\n      };\n\n    default:\n      return state;\n  }\n}',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/actionCreator.ts"})]}),(0,r.jsx)(d.Z,{code:'import { Dispatch } from "react";\nimport { ICounterContextAction } from "../../interfaces/contexts/counter";\nimport { DECREMENT, INCREMENT, RESET } from "./actions";\n\nconst createActions = (dispatch: Dispatch<ICounterContextAction>) => ({\n  increment: (value: number) => dispatch({ type: INCREMENT, payload: value }),\n  decrement: (value: number) => dispatch({ type: DECREMENT, payload: value }),\n  reset: () => dispatch({ type: RESET }),\n});\n\nexport default createActions;',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/provider.tsx"})]}),(0,r.jsx)(d.Z,{code:'import { createContext, ReactNode, useReducer } from "react";\nimport { ICounterContextValue } from "../../interfaces/contexts/counter";\nimport { TCounterReducer } from "../../types/contexts/counter";\nimport createActions from "./actionCreator";\nimport initialState from "./initialState";\nimport counterReducer from "./reducer";\n\nexport const CounterContext = createContext<ICounterContextValue | undefined>(\n  undefined\n);\n\nconst CounterContextProvider = ({ children }: { children: ReactNode }) => {\n  const [state, dispatch] = useReducer<TCounterReducer>(\n    counterReducer,\n    initialState\n  );\n\n  const actions = createActions(dispatch);\n\n  return (\n    <CounterContext.Provider value={{ ...state, ...actions }}>\n      {children}\n    </CounterContext.Provider>\n  );\n};\n\nexport default CounterContextProvider;',language:"tsx"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/hook.ts"})]}),(0,r.jsx)(d.Z,{code:'import { useContext } from "react";\nimport { CounterContext } from "./provider";\n\nexport const useCounterContext = () => {\n  const context = useContext(CounterContext);\n\n  if (context === undefined) {\n    throw new Error("useCounterContext must be used within a CounterProvider");\n  }\n\n  return context;\n};',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"contexts/counter/index.ts"})]}),(0,r.jsx)(d.Z,{code:'export * from "./hook";\nexport * from "./provider";',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"interfaces/contexts/counter/state.ts"})]}),(0,r.jsx)(d.Z,{code:"export interface ICounterContextState {\n  count: number;\n}",language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"interfaces/contexts/counter/action.ts"})]}),(0,r.jsx)(d.Z,{code:"interface IReducerAction<T> {\n  type: string;\n  payload?: T;\n}\n  \nexport interface ICounterContextAction extends IReducerAction<number> {}",language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"interfaces/contexts/counter/value.ts"})]}),(0,r.jsx)(d.Z,{code:"export interface ICounterContextValue {\n  count: number;\n  increment: (value: number) => void;\n  decrement: (value: number) => void;\n  reset: () => void;\n}",language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"interfaces/contexts/counter/index.ts"})]}),(0,r.jsx)(d.Z,{code:'export * from "./state";\nexport * from "./action";\nexport * from "./value";',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"types/contexts/counter/reducer.ts"})]}),(0,r.jsx)(d.Z,{code:'import {\n  ICounterContextAction,\n  ICounterContextState,\n} from "../../interfaces/contexts/counter";\n\nexport type TCounterReducer = (\n  state: ICounterContextState,\n  action: ICounterContextAction\n) => ICounterContextState;',language:"typescript"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Create ",(0,r.jsx)("b",{children:"types/contexts/counter/index.ts"})]}),(0,r.jsx)(d.Z,{code:'export * from "./reducer";',language:"typescript"}),(0,r.jsx)(c.x,{size:"sm",mt:20,children:"Now, we will wrap our App component with our counter context provider, so that we can consume our counter context state anywhere inside the App component."}),(0,r.jsxs)(c.x,{size:"sm",mt:10,children:["Update ",(0,r.jsx)("b",{children:"App.tsx"})]}),(0,r.jsx)(d.Z,{code:'import Counter from "./components/Counter";\nimport { CounterContextProvider } from "./contexts/counter";\n\nfunction App() {\n  return (\n    <CounterContextProvider>\n      <Counter />\n    </CounterContextProvider>\n  );\n}\n\nexport default App;',language:"tsx"}),(0,r.jsxs)(c.x,{size:"sm",mt:20,children:["Finally, create ",(0,r.jsx)("b",{children:"components/Counter.tsx"})]}),(0,r.jsx)(d.Z,{code:'import { FC, Fragment } from "react";\nimport { useCounterContext } from "../contexts/counter";\n\nconst Counter: FC = () => {\n  const { count, increment, decrement, reset } = useCounterContext();\n\n  return (\n    <Fragment>\n      <div>Count is: {count}</div>\n      <button onClick={() => increment(1)}>increment</button>\n      <button onClick={() => decrement(1)}>decrement</button>\n      <button onClick={() => increment(5)}>increment by 5</button>\n      <button onClick={() => decrement(10)}>decrement by 10</button>\n      <button onClick={() => reset()}>reset</button>\n    </Fragment>\n  );\n};\n\nexport default Counter;',language:"tsx"}),(0,r.jsx)("div",{style:{marginTop:"20px"},children:(0,r.jsx)(x.Z,{theme:"dark"===e?"dark":"light"})})]})]})}}},function(e){e.O(0,[298,774,888,179],(function(){return t=2880,e(e.s=t);var t}));var t=e.O();_N_E=t}]);